<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>java-examples (0.0.1)</title>
<date>2019-06-03 02:35:04 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2019-06-03 02:35:04 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<simpara>Travis CI status:
<inlinemediaobject>
<imageobject>
<imagedata fileref="https://travis-ci.org/daggerok/java-examples.svg?branch=master"/>
</imageobject>
<textobject><phrase>Build Status</phrase></textobject>
</inlinemediaobject></simpara>
</preface>
<chapter xml:id="introduction">
<title>Introduction</title>
<simpara>in progress&#8230;&#8203;</simpara>
<simpara>Read <link xl:href="https://daggerok.github.io/java-examples">project reference documentation</link></simpara>
<simpara>group:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/lazy-java">lazy-java</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/java-examples">java-examples</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/learn-jvm">learn-jvm</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/fold-java">fold-java</link></simpara>
</listitem>
</itemizedlist>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java)</simpara>
</chapter>
<chapter xml:id="implementation">
<title>Implementation</title>
<section xml:id="predicate-java-7-api">
<title>predicate (java 7 API):</title>
<formalpara>
<title>impl</title>
<para>
<programlisting language="java" linenumbering="unnumbered">public class Java7Predicate {

    public interface MyPredicate {
        boolean test(final String value);
    }

    @RequiredArgsConstructor
    public static class Is implements MyPredicate {
        final String value;

        @Override
        public boolean test(String value) {
            return value != null &amp;&amp; value.contains(this.value);
        }
    }

    public static class IsRed implements MyPredicate {
        @Override
        public boolean test(final String value) {
            return nonNull(value) &amp;&amp; value.toLowerCase().contains("red");
        }
    }

    public static void sideEffect(final MyPredicate predicate) {
        final List&lt;String&gt; list = Arrays.asList("ololo", "trololo", "red", "blue", "green", "red devil");
        for (String i : list) {
            if (predicate.test(i)) {
                System.out.println("i = " + i);
            }
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>test</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Slf4j
@CaptureSystemOutput
@DisplayName("test predicate API: java 7")
class Java7PredicateTest {

    @Test
    @DisplayName("test positive")
    void testPredicate(final CaptureSystemOutput.OutputCapture outputCapture) {

        assertAll(() -&gt; {

            sideEffect(new Java7Predicate.IsRed());
            Assertions.assertThat(outputCapture.toString())
                    .contains("i = red", "i = red devil");

            sideEffect(new Java7Predicate.Is("green"));
            Assertions.assertThat(outputCapture.toString().contains("t = green"));
        });
    }
}</programlisting>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/java-examples">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/java-examples">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>